{"version":3,"file":"static/js/111.a77dcf2e.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","pages/Login.jsx","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n} from '@chakra-ui/react';\nimport { logIn } from '../../redux/auth/operations';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(logIn({ email, password }));\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <Box w=\"full\" maxW=\"320px\" p=\"4\" borderWidth=\"1px\" borderRadius=\"lg\">\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <Stack spacing=\"4\">\n          <FormControl id=\"email\">\n            <FormLabel>Email</FormLabel>\n            <Input\n              type=\"email\"\n              value={email}\n              onChange={e => setEmail(e.target.value)}\n            />\n          </FormControl>\n          <FormControl id=\"password\">\n            <FormLabel>Password</FormLabel>\n            <Input\n              type=\"password\"\n              value={password}\n              onChange={e => setPassword(e.target.value)}\n            />\n          </FormControl>\n          <Button type=\"submit\" mt={4} colorScheme=\"teal\" size=\"lg\">\n            Log In\n          </Button>\n        </Stack>\n      </form>\n    </Box>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from '../components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n"],"names":["LoginForm","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_jsx","Box","w","maxW","p","borderWidth","borderRadius","children","onSubmit","e","preventDefault","logIn","autoComplete","_jsxs","Stack","spacing","FormControl","id","FormLabel","Input","type","value","onChange","target","Button","mt","colorScheme","size","Login","Helmet","StackItem","props","chakra","div","className","__css","display","flex","minWidth","displayName","Object","freeze","forwardRef","ref","isInline","directionProp","direction","align","justify","_props$spacing","wrap","divider","shouldWrapChildren","rest","dividerStyle","useMemo","options","prop","mapper","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","Array","isArray","map","item","isObject","keys","reduce","result","key","getDividerStyles","hasDivider","shouldUseChildren","clones","validChildren","getValidChildren","child","index","isLast","length","_child","clonedDivider","cloneElement","_divider","Fragment","_className","cx","alignItems","justifyContent","flexDirection","flexWrap","gap","Children","filter","isValidElement"],"sourceRoot":""}