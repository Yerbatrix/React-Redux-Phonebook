{"version":3,"file":"static/js/160.f95aceb3.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","webpack://goit-react-hw-08-phonebook/./src/components/Counter/Counter.module.css?1c3c","redux/selectors.js","components/Counter/Counter.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactListItem_item__UAAix\",\"details\":\"ContactListItem_details__9gLE2\",\"date\":\"ContactListItem_date__rQE2K\",\"name\":\"ContactListItem_name__cIBvF\",\"phone\":\"ContactListItem_phone__eLbis\",\"button\":\"ContactListItem_button__SG6H2\"};","import React from 'react';\nimport css from './ContactListItem.module.css';\nimport { deleteContact } from '../../redux/operations';\nimport { useDispatch } from 'react-redux';\n\nconst ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const formattedDate = new Date(contact.createdAt).toLocaleDateString(\n    'en-US',\n    {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    }\n  );\n\n  return (\n    <li className={css.item}>\n      <div className={css.details}>\n        <span className={css.date}>{formattedDate}</span>\n        <span className={css.name}>{contact.name}</span>\n        <span className={css.phone}>{contact.phone}</span>\n      </div>\n      <button\n        className={css.button}\n        onClick={() => handleDeleteContact(contact.id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Counter_container__lKuhH\"};","import { createSelector } from '@reduxjs/toolkit';\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  }\n);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport css from './Counter.module.css';\nimport { selectContacts } from '../../redux/selectors';\n\nconst Counter = () => {\n  const items = useSelector(selectContacts);\n  return (\n    <div className={css.container}>\n      <h4 className={css.total}>Total Contacts: {items.length}</h4>\n    </div>\n  );\n};\n\nexport default Counter;\n","import React from 'react';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport css from './ContactList.module.css';\nimport Counter from '../Counter/Counter';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/selectors';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <div>\n      <h2>Contact List</h2>\n      <Counter />\n      <ul className={css.list}>\n        {filteredContacts.map(contact => (\n          <ContactListItem key={contact.id} contact={contact} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactForm_container__qpJ1N\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/operations';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'phone') {\n      setPhone(value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (name.trim() === '' || phone.trim() === '') return;\n\n    const isDuplicate = contacts.some(contact => contact.name === name);\n    if (isDuplicate) {\n      alert('Contact with this name already exists!');\n      return;\n    }\n\n    dispatch(addContact({ name, phone }));\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <div className={css.container}>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"nameInput\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"nameInput\"\n            value={name}\n            onChange={handleChange}\n            placeholder=\"Enter name\"\n            required\n          />\n        </label>\n        <label htmlFor=\"phoneInput\">\n          Phone number\n          <input\n            type=\"tel\"\n            name=\"phone\"\n            id=\"phoneInput\"\n            pattern=\"^[0-9]{1,3}[-\\s]?[0-9]{1,14}$\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={phone}\n            onChange={handleChange}\n            placeholder=\"Enter phone number\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from '../redux/operations';\nimport ContactList from '../components/ContactList/ContactList';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport Counter from '../components/Counter/Counter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your Contacts</title>\n      </Helmet>\n      <Counter />\n      <ContactForm />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["_ref","contact","dispatch","useDispatch","formattedDate","Date","createdAt","toLocaleDateString","year","month","day","_jsxs","className","css","children","_jsx","name","phone","onClick","id","deleteContact","selectContacts","state","contacts","items","selectFilteredContacts","createSelector","filter","toLowerCase","includes","useSelector","length","filteredContacts","Counter","map","ContactListItem","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setPhone","handleChange","evt","_evt$target","target","value","onSubmit","preventDefault","trim","some","alert","addContact","htmlFor","type","onChange","placeholder","required","pattern","title","Contacts","useEffect","fetchContacts","_Fragment","Helmet","ContactForm","ContactList"],"sourceRoot":""}